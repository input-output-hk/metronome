metronome {
  checkpointing {
    # A name for the node that we can use to distinguish
    # if we run multiple instances on the same machine.
    name = service

    federation {
      # Public address of this federation member; required.
      self {
        host = null
        port = 9080
        # Private ECDSA key of this federation member in hexadecimal format; required.
        # It can either the the key itself, or a path to a file which contains the key.
        # The public key will be derived from the private key.
        private-key = null
      }

      # List of other federation members; records of {host, port, public-key}.
      others = []

      # The maximum number of tolerated Byzantine nodes; optional.
      # At most (n-1)/3, but can be lower to require smaller quorum.
      maxFaulty = null
    }

    consensus {
      # Minimum time to allow for a HotStuff round.
      min-timeout = 5s
      # Maximum time to allow for a HotStuff round, after numerous timeouts.
      max-timeout = 15s
      # Increment factor to apply on the timeout after a failed round.
      timeout-factor = 1.2
    }

    # Network configuration to accept connections from remote federation nodes.
    remote {
      # Bind address for the checkpointing service remote interface.
      listen {
        host = 0.0.0.0
        port = ${metronome.checkpointing.federation.self.port}
      }
      # Request roundtrip timeout.
      timeout = 3s
    }

    # Network configuration to accept connection from the local interpreter.
    local {
      # Bind address for the checkpointing service local interface.
      listen {
        host = 127.0.0.1
        port = 9081
      }
      # Address of the PoW Interpreter.
      target {
        host = 127.0.0.1
        port = 9082
      }
      # Request roundtrip timeout.
      timeout = 3s
    }

    database {
      # Storage location for RocksDB.
      path = ${user.home}"/.metronome/checkpointing/db/"${metronome.checkpointing.name}
      # Size of the ring buffer for the checkpointing ledger.
      state-history-size = 100
      # Number of blocks to keep before pruning.
      block-history-size = 100
      # Time to wait before pruning a block from history.
      prune-interval = 60s
    }
  }
}
